"""Adding new submission states `scored` and `sent_to_training` and
`Submission.sent_to_training_timestamp` to handle backend server hangs.

Revision ID: b781be9c6150
Revises: d2089df73116
Create Date: 2017-09-21 16:08:11.428401

"""

# revision identifiers, used by Alembic.
revision = 'b781be9c6150'
down_revision = 'd2089df73116'

from alembic import op
import sqlalchemy as sa

name = 'submission_states'
tmp_name = 'tmp_' + name

old_options = (
    'new',  # submitted by user to frontend server
    'checked',  # not used, checking is part of the workflow now
    'checking_error',  # not used, checking is part of the workflow now
    'trained',  # training finished normally on the backend server
    'training_error',  # training finished abnormally on the backend server
    'validated',  # validation finished normally on the backend server
    'validating_error',  # validation finished abnormally on the backend server
    'tested',  # testing finished normally on the backend server
    'testing_error',  # testing finished abnormally on the backend server
    'training',  # training is running normally on the backend server
)

new_options = sorted(old_options + (
    'sent_to_training',  # frontend server sent submission to backend server
    'scored',  # submission scored on the frontend server: final state
))

new_type = sa.Enum(*new_options, name=name)
old_type = sa.Enum(*old_options, name=name)

table_1 = 'submissions'
table_2 = 'submission_on_cv_folds'
column = 'state'  # change also manually in downgrade

tcr_1 = sa.sql.table(
    table_1, sa.Column(column, new_type, default='new'))
tcr_2 = sa.sql.table(
    table_2, sa.Column(column, new_type, default='new'))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('submissions', sa.Column(
        'sent_to_training_timestamp', sa.DateTime(), nullable=True))
    # ### end Alembic commands ###
    op.execute('ALTER TYPE ' + name + ' RENAME TO ' + tmp_name)
    new_type.create(op.get_bind())
    op.execute('ALTER TABLE ' + table_1 + ' ALTER COLUMN ' + column +
               ' TYPE ' + name + ' USING ' + column + '::text::' + name)
    op.execute('ALTER TABLE ' + table_2 + ' ALTER COLUMN ' + column +
               ' TYPE ' + name + ' USING ' + column + '::text::' + name)
    op.execute('DROP TYPE ' + tmp_name)
    op.execute(tcr_1.update().where(tcr_1.c.state == 'tested')
               .values(state='scored'))
    op.execute(tcr_2.update().where(tcr_2.c.state == 'tested')
               .values(state='scored'))


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('submissions', 'sent_to_training_timestamp')
    # ### end Alembic commands ###
    op.execute(tcr_1.update().where(tcr_1.c.state == 'scored')
               .values(state='tested'))
    op.execute(tcr_2.update().where(tcr_2.c.state == 'scored')
               .values(state='tested'))
    op.execute(tcr_1.update().where(tcr_1.c.state == 'sent_to_training')
               .values(state='new'))
    op.execute('ALTER TYPE ' + name + ' RENAME TO ' + tmp_name)
    old_type.create(op.get_bind())
    op.execute('ALTER TABLE ' + table_1 + ' ALTER COLUMN ' + column +
               ' TYPE ' + name + ' USING ' + column + '::text::' + name)
    op.execute('ALTER TABLE ' + table_2 + ' ALTER COLUMN ' + column +
               ' TYPE ' + name + ' USING ' + column + '::text::' + name)
    op.execute('DROP TYPE ' + tmp_name)
